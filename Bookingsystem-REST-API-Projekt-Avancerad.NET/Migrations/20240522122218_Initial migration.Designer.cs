// <auto-generated />
using System;
using Bookingsystem_REST_API_Projekt_Avancerad.NET.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookingsystem_REST_API_Projekt_Avancerad.NET.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240522122218_Initial migration")]
    partial class Initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projekt_API_Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentTime = new DateTime(2024, 5, 23, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(418),
                            CompanyId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentTime = new DateTime(2024, 6, 3, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(473),
                            CompanyId = 2,
                            CustomerId = 2
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentTime = new DateTime(2024, 5, 25, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(476),
                            CompanyId = 3,
                            CustomerId = 3
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentTime = new DateTime(2024, 6, 6, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(478),
                            CompanyId = 1,
                            CustomerId = 2
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentTime = new DateTime(2024, 5, 27, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(489),
                            CompanyId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentTime = new DateTime(2024, 5, 28, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(491),
                            CompanyId = 3,
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentTime = new DateTime(2024, 6, 3, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(493),
                            CompanyId = 1,
                            CustomerId = 3
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentTime = new DateTime(2024, 5, 30, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(496),
                            CompanyId = 2,
                            CustomerId = 1
                        },
                        new
                        {
                            AppointmentId = 9,
                            AppointmentTime = new DateTime(2024, 5, 31, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(498),
                            CompanyId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentTime = new DateTime(2024, 6, 8, 14, 22, 17, 566, DateTimeKind.Local).AddTicks(503),
                            CompanyId = 1,
                            CustomerId = 1
                        });
                });

            modelBuilder.Entity("Projekt_API_Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Paintball"
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "Bowling"
                        },
                        new
                        {
                            CompanyId = 3,
                            CompanyName = "Go Cart"
                        });
                });

            modelBuilder.Entity("Projekt_API_Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerEmail = "Hannes@test.se",
                            CustomerName = "Hannes Dahlberg",
                            CustomerPhoneNumber = "123456"
                        },
                        new
                        {
                            CustomerId = 2,
                            CustomerEmail = "Börje@test.se",
                            CustomerName = "Börje Svensson",
                            CustomerPhoneNumber = "12356887"
                        },
                        new
                        {
                            CustomerId = 3,
                            CustomerEmail = "Twei@test.se",
                            CustomerName = "Twei Twot",
                            CustomerPhoneNumber = "456622345"
                        });
                });

            modelBuilder.Entity("Projekt_API_Models.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonToChange")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoryId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Projekt_API_Models.LogInDetails", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("LogInDetails");

                    b.HasData(
                        new
                        {
                            LoginId = 1,
                            CustomerId = 1,
                            Password = "Password1",
                            Role = "User",
                            Username = "User1"
                        },
                        new
                        {
                            LoginId = 2,
                            CustomerId = 2,
                            Password = "Password2",
                            Role = "User",
                            Username = "User2"
                        },
                        new
                        {
                            LoginId = 3,
                            CustomerId = 3,
                            Password = "Password3",
                            Role = "User",
                            Username = "User3"
                        },
                        new
                        {
                            LoginId = 4,
                            CompanyId = 1,
                            Password = "Comp1",
                            Role = "Company",
                            Username = "Company1"
                        },
                        new
                        {
                            LoginId = 5,
                            CompanyId = 2,
                            Password = "Comp2",
                            Role = "Company",
                            Username = "Company2"
                        },
                        new
                        {
                            LoginId = 6,
                            CompanyId = 3,
                            Password = "Comp3",
                            Role = "Company",
                            Username = "Company3"
                        });
                });

            modelBuilder.Entity("Projekt_API_Models.Appointment", b =>
                {
                    b.HasOne("Projekt_API_Models.Company", "Company")
                        .WithMany("Appointments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt_API_Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Projekt_API_Models.History", b =>
                {
                    b.HasOne("Projekt_API_Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Projekt_API_Models.LogInDetails", b =>
                {
                    b.HasOne("Projekt_API_Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Projekt_API_Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Projekt_API_Models.Company", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Projekt_API_Models.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
